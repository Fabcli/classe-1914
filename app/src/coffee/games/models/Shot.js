// Generated by CoffeeScript 1.8.0
(function() {
  angular.module('classe1914.game').factory('Shot', [
    'Story', 'User', 'Notification', 'LoadGameConstant', function(Story, User, Notification, LoadGameConstant) {
      var Shot;
      return new (Shot = (function() {
        function Shot() {}

        Shot.prototype.create = function() {
          this.SETTINGS = LoadGameConstant.LoadSettings();
          this.physics.startSystem(Phaser.Physics.ARCADE);
          this.spacebar = this.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
          this.b_key = this.input.keyboard.addKey(Phaser.Keyboard.B);
          this.z_key = this.input.keyboard.addKey(Phaser.Keyboard.Z);
          this.cursors = this.input.keyboard.createCursorKeys();
          this.world.setBounds(0, 0, this.SETTINGS.world.width, this.SETTINGS.world.height);
          this.shotgunPosX = this.game.width / 2;
          this.shotgunPosY = this.game.height + (0.015 * this.game.height);
          this.score = 0;
          this.gameover = false;
          this.totalTargets = this.SETTINGS.target.quantity;
          this.timerDuration = this.SETTINGS.timer.duration;
          this.buildWorld();
          this.buildScore();
          return this.buildTimer();
        };

        Shot.prototype.buildWorld = function() {
          this.add.sprite(0, 0, "bg");
          this.ambianceSound();
          this.buildTargets();
          this.buildExplosion();
          this.buildShotgun();
          this.activeShot();
          return this.cameraSettings();
        };

        Shot.prototype.ambianceSound = function() {
          var ambiance;
          ambiance = this.game.add.audio("ambiance");
          ambiance.volume = this.SETTINGS.audio.ambiance.volume;
          ambiance.loop = this.SETTINGS.audio.ambiance.loop;
          ambiance.play();
          return ambiance.onLoop.add(function() {
            return ambiance.play();
          });
        };

        Shot.prototype.buildTargets = function() {
          var i, scale, t, targetX, targetY, _results;
          this.targetGroup = this.add.group();
          this.targetGroup.enableBody = true;
          i = 0;
          _results = [];
          while (i < this.totalTargets) {
            targetX = this.rnd.realInRange(this.shotgunPosX, this.world.width - this.shotgunPosX);
            targetY = this.rnd.realInRange(this.shotgunPosY - 120, this.shotgunPosY - 20);
            t = this.targetGroup.create(targetX, targetY, "target");
            t.anchor.setTo(0.5, 0.5);
            scale = this.rnd.realInRange(0.2, 1.0);
            t.scale.x = t.scale.y = scale;
            this.physics.enable(t, Phaser.Physics.ARCADE);
            t.enableBody = true;
            _results.push(i++);
          }
          return _results;
        };

        Shot.prototype.buildShotgun = function() {
          this.shotgun = this.add.sprite(this.shotgunPosX, this.shotgunPosY, "shotgun");
          this.shotgun.fixedToCamera = true;
          this.shotgun.anchor.setTo(0.4, 0.8);
          return this.shotgun.animations.add("shotAnim", [0, 1, 2, 3, 0], 60, false);
        };

        Shot.prototype.buildExplosion = function() {
          this.shotExplosion = this.add.emitter(this.shotgunPosX - 11, this.shotgunPosY - 125, 100);
          this.shotExplosion.fixedToCamera = true;
          this.shotExplosion.minParticleScale = 0.2;
          this.shotExplosion.maxParticleScale = 2;
          this.shotExplosion.minParticleSpeed.setTo(-100, 100);
          this.shotExplosion.maxParticleSpeed.setTo(100, -100);
          return this.shotExplosion.makeParticles("shot");
        };

        Shot.prototype.cameraSettings = function() {
          return this.camera.focusOnXY(this.world.centerX, this.world.centerY);
        };

        Shot.prototype.buildScore = function() {
          this.scoreStyle = {
            font: "16px Courier",
            fill: "#fff",
            stroke: "#6a9f3a",
            strokeThickness: 1,
            align: "center"
          };
          this.scoreText = this.add.text(20, 12, "Score : " + this.score, this.scoreStyle);
          return this.scoreText.fixedToCamera = true;
        };

        Shot.prototype.buildTimer = function() {
          this.timeContainer = this.add.sprite(20, 70, "timeContainer");
          this.timeBar = this.add.sprite(20, 70, "timeBar");
          this.timeBarWidth = this.timeBar.width;
          this.timeContainer.fixedToCamera = this.timeBar.fixedToCamera = true;
          this.timerLeft = this.timerDuration;
          this.timerText = this.add.text(20, 40, "Chrono : " + this.timerLeft + " s", this.scoreStyle);
          return this.timerText.fixedToCamera = true;
        };

        Shot.prototype.update = function() {
          if (this.gameover === false) {
            this.moveWorld();
            this.updateTimer();
            return this.collideTarget();
          }
        };

        Shot.prototype.collideTarget = function() {
          if (this.gameover === false) {
            if (this.totalTargets > 0) {
              return this.physics.arcade.overlap(this.targetGroup, this.shotExplosion, this.targetShot, null, this);
            } else {
              this.point = this.score + this.timerLeft;
              this.gameoverContain = "BRAVO \nTu as eu toutes les cibles.\n\nScore: " + this.score + "\nDons un bonus temps: " + this.timerLeft;
              return this.gameOver();
            }
          }
        };

        Shot.prototype.activeShot = function() {
          this.input.onDown.add(this.shotAction, this);
          return this.spacebar.onDown.add(this.shotAction, this);
        };

        Shot.prototype.shotAction = function() {
          if (this.gameover === false) {
            this.shotgun.animations.play("shotAnim");
            this.shotExplosion.start(true, 10, null, 1);
            this.shotSound = this.add.audio("shot", 0.3);
            return this.shotSound.play();
          }
        };

        Shot.prototype.moveWorld = function() {
          if (this.gameover === false) {
            if (this.cursors.left.isDown) {
              this.camera.x -= this.cursors.left.duration * 0.1;
            } else {
              if (this.cursors.right.isDown) {
                this.camera.x += this.cursors.right.duration * 0.1;
              }
            }
            if (this.cursors.up.isDown) {
              return this.camera.y -= this.cursors.up.duration * 0.08;
            } else {
              if (this.cursors.down.isDown) {
                return this.camera.y += this.cursors.down.duration * 0.08;
              }
            }
          }
        };

        Shot.prototype.targetShot = function(target, shot) {
          target.kill();
          this.targetShotSound = this.add.audio("break_target", 0.8);
          this.targetShotSound.play();
          this.totalTargets--;
          return this.score++;
        };

        Shot.prototype.updateTimer = function() {
          var elapsedSeconds;
          if (this.gameover === false) {
            if (this.timeBar.width > 0) {
              elapsedSeconds = this.timerDuration - this.time.totalElapsedSeconds();
              this.timerLeft = Math.round(elapsedSeconds);
              this.timeBar.width = this.timeBarWidth * elapsedSeconds / this.timerDuration;
              return this.timerText.text = "Chrono : " + this.timerLeft + " s";
            } else {
              this.point = this.score - this.totalTargets;
              this.gameoverContain = "L'entrainement est terminÃ© \nTu n'as plus de temps \n\nScore: " + this.score + "\n\n Dont un malus cible: -" + this.totalTargets;
              return this.gameOver();
            }
          }
        };

        Shot.prototype.gameOver = function() {
          this.gameover = true;
          User.indicators.point += this.point;
          Notification.error(this.gameoverContain);
          return setTimeout((function() {
            User.nextSequence();
            if (this.game != null) {
              return this.game.destroy();
            }
          }), 2000);
        };

        Shot.prototype.render = function() {
          this.game.debug.text('Position de la cam => x: ' + this.camera.x + ',y: ' + this.camera.y, this.game.width / 2, 32);
          this.game.debug.text('Taille du monde: ' + this.world.width, this.game.width / 2, 64);
          this.game.debug.text('Source Ratio: ' + this.game.scale.sourceAspectRatio, this.game.width / 2, 96);
          this.game.debug.text('Ratio: ' + this.game.scale.aspectRatio, this.game.width / 2, 128);
          this.game.debug.text('Movement x: ' + this.movementX, this.game.width / 2, 160);
          this.game.debug.text('Movement Y: ' + this.movementY, this.game.width / 2, 192);
          this.game.debug.text('input x: ' + this.input.mouse.event.movementX, this.game.width / 2, 228);
          return this.game.debug.text('input y: ' + this.input.mouse.event.movementY, this.game.width / 2, 260);
        };

        return Shot;

      })());
    }
  ]);

}).call(this);

//# sourceMappingURL=Shot.js.map
