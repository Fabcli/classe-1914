// Generated by CoffeeScript 1.8.0
(function() {
  angular.module('classe1914.game').factory('Interactive', [
    '$rootScope', 'User', 'Notification', 'LoadGameConstant', function(Story, User, Notification, LoadGameConstant) {
      var Interactive;
      return new (Interactive = (function() {
        function Interactive() {}

        Interactive.prototype.create = function() {
          this.SETTINGS = LoadGameConstant.LoadSettings();
          this.physics.startSystem(Phaser.Physics.ARCADE);
          this.cursors = this.input.keyboard.createCursorKeys();
          this.world.setBounds(0, 0, this.SETTINGS.world.width, this.SETTINGS.world.height);
          this.gameover = false;
          this.buildWorld();
          return this.nextSequence();
        };

        Interactive.prototype.buildWorld = function() {
          this.add.sprite(0, 0, "bg");
          this.ambianceSound();
          return this.cameraSettings();
        };

        Interactive.prototype.cameraSettings = function() {
          return this.camera.focusOnXY(this.world.centerX, this.world.centerY);
        };

        Interactive.prototype.ambianceSound = function() {
          var ambiance;
          ambiance = this.game.add.audio("ambiance", this.SETTINGS.audio.ambiance.volume, this.SETTINGS.audio.ambiance.loop);
          ambiance.play();
          return ambiance.onLoop.add(function() {
            return ambiance.play();
          });
        };

        Interactive.prototype.update = function() {
          if (this.gameover === false) {
            return this.moveWorld();
          }
        };

        Interactive.prototype.moveWorld = function() {
          if (this.gameover === false) {
            if (this.SETTINGS.navigation.horizontal === true) {
              if (this.cursors.left.isDown) {
                this.camera.x -= this.cursors.left.duration * 0.1;
              }
              if (this.cursors.right.isDown) {
                this.camera.x += this.cursors.right.duration * 0.1;
              }
            }
            if (this.SETTINGS.navigation.vertical === true) {
              if (this.cursors.up.isDown) {
                this.camera.y -= this.cursors.up.duration * 0.08;
              }
              if (this.cursors.down.isDown) {
                return this.camera.y += this.cursors.down.duration * 0.08;
              }
            }
          }
        };

        Interactive.prototype.gameOver = function() {
          this.gameover = true;
          User.indicators.point += this.point;
          Notification.error(this.gameoverContain);
          return setTimeout((function() {
            User.nextSequence();
            if (this.game != null) {
              return this.game.destroy();
            }
          }), 2000);
        };

        Interactive.prototype.nextSequence = function() {
          return setTimeout((function() {
            console.log("go to next");
            return User.nextSequence();
          }), 5000);
        };

        Interactive.prototype.render = function() {};

        return Interactive;

      })());
    }
  ]);

}).call(this);

//# sourceMappingURL=Interactive.js.map
