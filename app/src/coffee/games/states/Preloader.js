// Generated by CoffeeScript 1.8.0
(function() {
  angular.module('classe1914.game').factory('Preloader', [
    'constant.games.shot', '$filter', 'Story', 'User', function(shotAssets, $filter, Story, User) {
      var Preloader;
      return new (Preloader = (function() {
        function Preloader() {
          this.sequence = Story.sequence(User.chapter, User.scene, User.sequence);
          this.media = $filter('media');
          this.background = null;
          this.preloadBar = null;
          this.ready = false;
        }

        Preloader.prototype.loadAssets = function(model, name) {
          this.ASSETS = null;
          if (model === 'shot') {
            if (name === 'demo') {
              this.ASSETS = shotAssets.demo;
            }
          }
          return this.ASSETS;
        };

        Preloader.prototype.preload = function() {
          var assetsAtlas, assetsAudio, assetsImages, assetsSprite;
          this.gameModel = this.sequence.game_model;
          this.gameName = this.sequence.game_name;
          this.preloadBar = this.add.sprite((this.game.width / 2) - 45, this.game.width / 3, 'preloadBar');
          this.preloadBarContainer = this.add.sprite((this.game.width / 2) - 45, this.game.width / 3, 'preloadBarContainer');
          this.load.setPreloadSprite(this.preloadBar);
          this.loadAssets(this.gameModel, this.gameName);
          assetsImages = this.ASSETS.images;
          assetsAtlas = this.ASSETS.spriteAtlas;
          assetsSprite = this.ASSETS.spriteSheet;
          assetsAudio = this.ASSETS.audio;
          angular.forEach(assetsImages, (function(_this) {
            return function(imagePath, imageName) {
              return _this.load.image(imageName, _this.media(imagePath));
            };
          })(this));
          angular.forEach(assetsAtlas, (function(_this) {
            return function(atlasValues, atlasName) {
              return _this.load.atlas(atlasName, _this.media(atlasValues.path), _this.media(atlasValues.json));
            };
          })(this));
          angular.forEach(assetsSprite, (function(_this) {
            return function(spriteValues, spriteName) {
              return _this.load.spritesheet(spriteName, _this.media(spriteValues.path), spriteValues.width, spriteValues.height);
            };
          })(this));
          return angular.forEach(assetsAudio, (function(_this) {
            return function(audioArray, audioName) {
              _this._a = [];
              angular.forEach(audioArray, function(audioPath) {
                return _this._a.push(_this.media(audioPath));
              });
              return _this.load.audio(audioName, _this._a);
            };
          })(this));
        };

        Preloader.prototype.create = function() {
          this.preloadBar.cropEnabled = false;
          this.ready = true;
          return this.state.start("MainMenu");
        };

        Preloader.prototype.update = function() {};

        return Preloader;

      })());
    }
  ]);

}).call(this);

//# sourceMappingURL=Preloader.js.map
